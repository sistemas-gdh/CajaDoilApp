/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.Helper;
import Controlador.HelperDMCD;
import Controlador.HelperDMCS;
import Controlador.HelperMCD;
import Controlador.HelperMCS;
import Controlador.HelperSCC;
import Controlador.HelperSCD;
import Controlador.HelperSCS;
import Controlador.HelperUsuarios;
import Modelo.DetalleMcd;
import Modelo.DetalleMcs;
import Modelo.MovimientosCajas;
import Modelo.MovimientosCajasd;
import Modelo.SaldoCajas;
import Modelo.SolicitudCaja;
import Modelo.Usuarios;
import java.awt.event.KeyEvent;
import java.util.Iterator;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luis
 */
public class App_LiqCCPendientes extends javax.swing.JInternalFrame {

    /**
     * Creates new form App_LiquidarCC
     */
    DefaultTableModel modelo = new DefaultTableModel();
    public static int bandera;
    public static long codLiq;
    HelperMCS oMCS;
    HelperMCD oMCD;
    HelperDMCS oDMCS;
    HelperDMCD oDMCD;
    HelperUsuarios oU;
    Helper oper;
    HelperSCS oSCS;
    HelperSCD oSCD;
    HelperSCC oSCC;
    
    public void updateLP(long id,int valor) {//PENDIENTES DE LIQUIDAR
        oper.limpiaTabla(modelo, tablalcc);
        if(valor == 1){
            modelo = oDMCS.obtenerDMCS(modelo, 1, id);
        }else{
            modelo = oDMCD.obtenerDMCD(modelo, 1, id);
        }
        tablalcc.setModel(modelo);
    }
    
        public void updateT() {
        DefaultTableModel mm = (DefaultTableModel)App_PreLiqPendientes.tablals.getModel();
        oper.limpiaTabla(mm, App_PreLiqPendientes.tablals);
        mm = oMCS.getMcsByEstado(mm,1);
        App_PreLiqPendientes.tablals.setModel(mm);
    }
    public void updateTD() {
        DefaultTableModel md = (DefaultTableModel)App_PreLiqPendientes.tablald.getModel();
        oper.limpiaTabla(md, App_PreLiqPendientes.tablald);
        md = oMCD.getMcdByEstado(md, 1);
        App_PreLiqPendientes.tablald.setModel(md);
    }
    
    public App_LiqCCPendientes() {
        initComponents();
        oMCS = new HelperMCS();
        oMCD = new HelperMCD();
        oDMCS = new HelperDMCS();
        oDMCD = new HelperDMCD();
        oper = new Helper();
        oU = new HelperUsuarios();
        oSCC = new HelperSCC();
        oSCS = new HelperSCS();
        oSCD = new HelperSCD();

        String t[] = {"COD", "DESCRIPCIÓN", "U.MED", "CANT.", "P.U", "Importe", "ESTADO"};
        modelo.setColumnIdentifiers(t);

        String tix = tit.getText();
        String imp = il.getText();
        if (bandera == 1) {
            tit.setText(tix + " PEN");
            il.setText(imp + " (S/.):");
            MovimientosCajas lmcs = oMCS.buscaMCS(codLiq);
            serie.setText(lmcs.getMcsSerie());
            desc.setText(lmcs.getMcsDesc());
            fecha.setText(lmcs.getMcsFecha().toString());
            liq.setText(lmcs.getMcsImporte().toString());

            /*DETALLE DE LIQUIDACION */
            modelo = oDMCS.obtenerDMCS(modelo, 1, codLiq);

            tablalcc.setModel(modelo);
        } else {
            tit.setText(tix + " USD");
            il.setText(imp + " ($):");
            MovimientosCajasd lmcd = oMCD.buscaMCD(codLiq);
            serie.setText(lmcd.getMcdSerie());
            desc.setText(lmcd.getMcdDesc());
            fecha.setText(lmcd.getMcdFecha().toString());
            liq.setText(lmcd.getMcdImporte().toString());
            /*DETALLE DE LIQUIDACION */

            modelo = oDMCD.obtenerDMCD(modelo, 1, codLiq);

            tablalcc.setModel(modelo);
        }
        tablalcc.getColumnModel().getColumn(0).setPreferredWidth(1);// 
        tablalcc.getColumnModel().getColumn(1).setPreferredWidth(250);
        tablalcc.getColumnModel().getColumn(2).setPreferredWidth(25);
        tablalcc.getColumnModel().getColumn(3).setPreferredWidth(25);
        tablalcc.getColumnModel().getColumn(4).setPreferredWidth(50);
        tablalcc.getColumnModel().getColumn(5).setPreferredWidth(75);
        tablalcc.getColumnModel().getColumn(6).setPreferredWidth(75);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tit = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        il = new javax.swing.JLabel();
        serie = new javax.swing.JLabel();
        desc = new javax.swing.JLabel();
        liq = new javax.swing.JLabel();
        fecha = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablalcc = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        btnS1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);

        tit.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
        tit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tit.setText("VALIDAR LIQUIDACIÓN DE CAJA CHICA");

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("SERIE:");

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("FECHA:");

        jLabel3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("DESCRIPCIÓN:");

        il.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        il.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        il.setText("IMPORTE A LIQUIDAR");

        serie.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        serie.setText("XXXXX");

        desc.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        desc.setText("XXXXX");

        liq.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        liq.setText("XXXXX");

        fecha.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        fecha.setText("XXXXX");

        tablalcc.setToolTipText("");
        tablalcc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablalccKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablalcc);

        jLabel4.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("DETALLE DE LIQUIDACIÓN");

        jButton3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 16)); // NOI18N
        jButton3.setForeground(new java.awt.Color(204, 102, 0));
        jButton3.setText("OBSERVAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 16)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 153, 51));
        jButton1.setText("VALIDAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 16)); // NOI18N
        jButton5.setText("VER");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        btnS1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 16)); // NOI18N
        btnS1.setText("SALIR");
        btnS1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnS1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jButton5)
                                            .addGap(123, 123, 123)
                                            .addComponent(jButton1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton3)
                                            .addGap(121, 121, 121)
                                            .addComponent(btnS1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(tit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                                            .addGap(27, 27, 27)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(serie, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                                                .addComponent(desc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(8, 8, 8)
                                                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(il, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(18, 18, 18)
                                            .addComponent(liq, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(serie))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(desc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(il)
                    .addComponent(liq)
                    .addComponent(fecha))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnS1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        if (App_LiqCCPendientes.bandera == 1) {
            DetalleMcs detm = oDMCS.buscaDMCS(Integer.parseInt(tablalcc.getValueAt(tablalcc.getSelectedRow(), 0).toString()));

            JOptionPane pane = new JOptionPane("******************************************************** Fecha: " + detm.getDmcsDocfecha() + "\n"
                    + detm.getDmcsDoc() + " " + detm.getDmcsDocserie() + "\n"
                    + detm.getDmcsProveedor() + "\n"
                    + "-----------------------------------------------------------------------------\n"
                    + "Cantidad: " + detm.getDmcsCant() + "\n"
                    + "Unidad de Medida: " + detm.getUnidadmId() + "\n"
                    + "Descripción: " + detm.getDmcsDesc() + "\n"
                    + " Precio Unitario: " + detm.getDmcsImporte() + "\n"
                    + "Sub-Total: " + detm.getDmcsDoctotal() + "\n"
                    + "-----------------------------------------------------------------------------\n"
                    + "***************************************************** Total Facturado: S/. " + detm.getDmcsDoctotal());

            JDialog dialog = pane.createDialog(this, "DETALLE DE LIQUIDACIÓN");
            dialog.setLocation(890, 400);  // added!
            dialog.setVisible(true);

        } else {
            DetalleMcd detm = oDMCD.buscaDMCD(Integer.parseInt(tablalcc.getValueAt(tablalcc.getSelectedRow(), 0).toString()));
            JOptionPane pane = new JOptionPane("******************************************************** Fecha: " + detm.getDmcdDocfecha() + "\n"
                    + detm.getDmcdDoc() + " " + detm.getDmcdDocserie() + "\n"
                    + detm.getDmcdProveedor() + "\n"
                    + "-----------------------------------------------------------------------------\n"
                    + "Cantidad: " + detm.getDmcdCant() + "\n"
                    + "Unidad de Medida: " + detm.getUnidadmId() + "\n"
                    + "Descripción: " + detm.getDmcdDesc() + "\n"
                    + " Precio Unitario: " + detm.getDmcdImporte() + "\n"
                    + "Sub-Total: " + detm.getDmcdDoctotal() + "\n"
                    + "-----------------------------------------------------------------------------\n"
                    + "***************************************************** Total Facturado: S/. " + detm.getDmcdDoctotal());

            JDialog dialog = pane.createDialog(this, "DETALLE DE LIQUIDACIÓN");
            dialog.setLocation(890, 400);  // added!
            dialog.setVisible(true);
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnS1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnS1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnS1ActionPerformed

    private void tablalccKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablalccKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (App_LiqCCPendientes.bandera == 1) {
                DetalleMcs detm = oDMCS.buscaDMCS(Integer.parseInt(tablalcc.getValueAt(tablalcc.getSelectedRow(), 0).toString()));

                JOptionPane pane = new JOptionPane("******************************************************** Fecha: " + detm.getDmcsDocfecha() + "\n"
                        + detm.getDmcsDoc() + " " + detm.getDmcsDocserie() + "\n"
                        + detm.getDmcsProveedor() + "\n"
                        + "-----------------------------------------------------------------------------\n"
                        + "Cantidad: " + detm.getDmcsCant() + "\n"
                        + "Unidad de Medida: " + detm.getUnidadmId() + "\n"
                        + "Descripción: " + detm.getDmcsDesc() + "\n"
                        + " Precio Unitario: " + detm.getDmcsImporte() + "\n"
                        + "Sub-Total: " + detm.getDmcsDoctotal() + "\n"
                        + "-----------------------------------------------------------------------------\n"
                        + "***************************************************** Total Facturado: S/. " + detm.getDmcsDoctotal());

                JDialog dialog = pane.createDialog(this, "DETALLE DE LIQUIDACIÓN");
                dialog.setLocation(890, 400);  // added!

                dialog.setVisible(true);

            } else {
            DetalleMcd detm = oDMCD.buscaDMCD(Integer.parseInt(tablalcc.getValueAt(tablalcc.getSelectedRow(), 0).toString()));
            JOptionPane pane = new JOptionPane("******************************************************** Fecha: " + detm.getDmcdDocfecha() + "\n"
                    + detm.getDmcdDoc() + " " + detm.getDmcdDocserie() + "\n"
                    + detm.getDmcdProveedor() + "\n"
                    + "-----------------------------------------------------------------------------\n"
                    + "Cantidad: " + detm.getDmcdCant() + "\n"
                    + "Unidad de Medida: " + detm.getUnidadmId() + "\n"
                    + "Descripción: " + detm.getDmcdDesc() + "\n"
                    + " Precio Unitario: " + detm.getDmcdImporte() + "\n"
                    + "Sub-Total: " + detm.getDmcdDoctotal() + "\n"
                    + "-----------------------------------------------------------------------------\n"
                    + "***************************************************** Total Facturado: S/. " + detm.getDmcdDoctotal());

            JDialog dialog = pane.createDialog(this, "DETALLE DE LIQUIDACIÓN");
            dialog.setLocation(890, 400);  // added!
            dialog.setVisible(true);
            }
        }
    }//GEN-LAST:event_tablalccKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int opcion = JOptionPane.showConfirmDialog(this, "Seguro que desea continuar?", "Aviso", JOptionPane.YES_NO_OPTION);

        if (opcion == 0) { 
            if (App_LiqCCPendientes.bandera == 1) {
                DetalleMcs detm = oDMCS.buscaDMCS(Integer.parseInt(tablalcc.getValueAt(tablalcc.getSelectedRow(), 0).toString()));
                oDMCS.aEstadoDS(detm.getDmcsId(),4);
                System.out.println("xxx"+detm.getMovimientosCajas().getMcsId());
                oMCS.aEstado(detm.getMovimientosCajas().getMcsId(), 4);
                updateT();
                this.dispose();
                
            } else {
                DetalleMcd detm = oDMCD.buscaDMCD(Integer.parseInt(tablalcc.getValueAt(tablalcc.getSelectedRow(), 0).toString()));
                oDMCD.aEstadoDD(detm.getDmcdId(),4);
                oMCD.aEstado(detm.getMovimientosCajasd().getMcdId(), 4);
                updateTD();
                this.dispose();
            }
            
        } else {
            
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(App_LiqCCPendientes.bandera == 1){
            DetalleMcs detm = oDMCS.buscaDMCS(Integer.parseInt(tablalcc.getValueAt(tablalcc.getSelectedRow(), 0).toString()));
            oDMCS.aEstadoDS(detm.getDmcsId(),2);
            int e1 = oDMCS.searchLiqS(detm.getMovimientosCajas().getMcsId(), 1);
            int e2 = oDMCS.searchLiqS(detm.getMovimientosCajas().getMcsId(), 4);
            updateLP(detm.getMovimientosCajas().getMcsId(),1);
            if(e1 >0 || e2 >0){
                
            }else{
                MovimientosCajas tmcs = oMCS.buscaMCS(detm.getMovimientosCajas().getMcsId());
                double mE = tmcs.getMcsImporte();
                double mL = tmcs.getMcsImportel();
                oMCS.aEstado(tmcs.getMcsId(), 2);
                
                if(mE == mL){
                    //NO VARIA
                }else if(mE > mL){
                    
                    oMCS.setDR(tmcs.getMcsId(), (mE - mL), 0.0);
                    //INGRESO A CAJA SOLES
                    Usuarios uu = oU.buscaUsuarios(Integer.parseInt(App_Principal.codigo.getText()));
                    double mont = mE - mL;
                    String descx = "INGRESO PARTE DE "+tmcs.getMcsSerie();
                    MovimientosCajas temppc = oMCS.getLast();
                    long corr = 0;
                    if (temppc == null) {
                        corr = 1;
                    } else {
                        corr = temppc.getMcsId() + 1;
                    }
                    String seriex = oper.generarSerie(corr, 2);
                    MovimientosCajas mcsx = new MovimientosCajas(uu, seriex, oper.getF(), descx, mont, mont, 0.0, 0.0, uu.getUsuarioId(), 100, corr, 1);
                    oper.registrar(mcsx);
                    MovimientosCajas tmcsx = oMCS.buscaMCS(oper.getNextID());
                    SaldoCajas tempsc = oSCS.getLast();
                    if (tempsc == null) {
                        SaldoCajas scx = new SaldoCajas(tmcsx, mont, 0.0, mont, 0);
                        oper.registrar(scx);
                    } else {
                        SaldoCajas scx = new SaldoCajas(tmcsx, mont, 0.0, tempsc.getScsSaldo() + mont, 0);
                        oper.registrar(scx);
                    } 
                    // FIN DE INGRESO A CAJA SOLES
                }else if(mE < mL){
                    oMCS.setDR(tmcs.getMcsId(), 0.0, (mL - mE));
                    double i = mL - mE;
                    String descx = "SOLICITUD PARTE DE "+tmcs.getMcsSerie();
                    //SOLICITUD DE SALIDA DE CAJA EN SOLES
                    Usuarios u = oU.buscaUsuarios(Integer.parseInt(App_Principal.codigo.getText()));
                    SolicitudCaja temppc = oSCC.getLast();
                    long corr = 0;
                    if (temppc == null) {
                        corr = 1;
                    } else {
                        corr = temppc.getScId() + 1;
                    }

                    String seriexx = oper.generarSerie(corr, 1);

                    SolicitudCaja pc = new SolicitudCaja(u, seriexx, oper.getF(), 1, descx, i, 0, 0, 0, corr, 0);
                    oper.registrar(pc);
                    //FIN SOLICITUD DE SALIDA DE CAJA EN SOLES
                }
                updateT();
                this.dispose();
            }
        }else{
            DetalleMcd detm = oDMCD.buscaDMCD(Integer.parseInt(tablalcc.getValueAt(tablalcc.getSelectedRow(), 0).toString()));
            oDMCD.aEstadoDD(detm.getDmcdId(),2);
            int e1 = oDMCS.searchLiqS(detm.getMovimientosCajasd().getMcdId(), 1);
            int e2 = oDMCS.searchLiqS(detm.getMovimientosCajasd().getMcdId(), 4);
            updateLP(detm.getMovimientosCajasd().getMcdId(),2);
            if(e1 >0 || e2 >0){
                
            }else{
                MovimientosCajasd tmcd = oMCD.buscaMCD(detm.getMovimientosCajasd().getMcdId());
                double mE = tmcd.getMcdImporte();
                double mL = tmcd.getMcdImportel();
                oMCD.aEstado(tmcd.getMcdId(),2);
                if(mE == mL){
                    
                }else if(mE > mL){
                    oMCD.setDR(tmcd.getMcdId(), (mE - mL), 0.0);
                    //INGRESO CAJA DOLARES
                    Usuarios uu = oU.buscaUsuarios(Integer.parseInt(App_Principal.codigo.getText()));
                    double mont = mE - mL;
                    String descx = "INGRESO PARTE DE "+tmcd.getMcdSerie();
                    MovimientosCajasd temppc = oMCD.getLast();
                    long corr = 0;
                    if (temppc == null) {
                        corr = 1;
                    } else {
                        corr = temppc.getMcdId() + 1;
                    }
                    String seriex = oper.generarSerie(corr, 2);
                    MovimientosCajas mcsx = new MovimientosCajas(uu, seriex, oper.getF(), descx, mont, mont, 0.0, 0.0, uu.getUsuarioId(), 100, corr, 1);
                    oper.registrar(mcsx);
                    MovimientosCajas tmcsx = oMCS.buscaMCS(oper.getNextID());
                    SaldoCajas tempsc = oSCS.getLast();
                    if (tempsc == null) {
                        SaldoCajas scx = new SaldoCajas(tmcsx, mont, 0.0, mont, 0);
                        oper.registrar(scx);
                    } else {
                        SaldoCajas scx = new SaldoCajas(tmcsx, mont, 0.0, tempsc.getScsSaldo() + mont, 0);
                        oper.registrar(scx);
                    }
                    //FIN DE INGRESO CAJA DOLARES
                }else if(mE < mL){
                    oMCD.setDR(tmcd.getMcdId(),0.0 ,(mL - mE));
                    //SOLICITUD DE CAJA EN DOLARES
                    double i = mL - mE;
                    String descx = "SOLICITUD PARTE DE "+tmcd.getMcdSerie();
                    //SOLICITUD DE SALIDA DE CAJA EN SOLES
                    Usuarios u = oU.buscaUsuarios(Integer.parseInt(App_Principal.codigo.getText()));
                    SolicitudCaja temppc = oSCC.getLast();
                    long corr = 0;
                    if (temppc == null) {
                        corr = 1;
                    } else {
                        corr = temppc.getScId() + 1;
                    }

                    String seriexx = oper.generarSerie(corr, 1);

                    SolicitudCaja pc = new SolicitudCaja(u, seriexx, oper.getF(), 2, descx, i, 0, 0, 0, corr, 0);
                    oper.registrar(pc);
                    //FIN SOLICITUD DE SALIDA DE CAJA EN DOLARES
                }
                updateTD();
                this.dispose();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnS1;
    private javax.swing.JLabel desc;
    private javax.swing.JLabel fecha;
    private javax.swing.JLabel il;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel liq;
    private javax.swing.JLabel serie;
    public static javax.swing.JTable tablalcc;
    private javax.swing.JLabel tit;
    // End of variables declaration//GEN-END:variables
}
